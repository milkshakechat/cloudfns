AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  wallet-gateway

  Sample SAM Template for wallet-gateway

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 300
    MemorySize: 512
    Tracing: Active
    # Environment:
    #   Variables:
    #     WALLET_GATEWAY_BASE64_KEY: 'template' # // the right way to do this is using secretsmanager
    #     GCP_KEYFILE_BASE64: 'template' # !Sub '{{resolve:secretsmanager:MySecretName:SecretString:MySecretKey}}'
  Api:
    TracingEnabled: true
Resources:
  MyAuthApi:
      Type: AWS::Serverless::Api
      Properties:
        StageName: Staging
        Auth:
          DefaultAuthorizer: WalletAdminAuthorizer
          Authorizers:
            WalletAdminAuthorizer:
              FunctionArn: !GetAtt WalletAuthValidatorFunction.Arn
              AuthorizerResultTtlInSeconds: 0 # This disables caching
  WalletAuthValidatorFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: wallet-gateway/
      Handler: app.walletAuthValidator
      Runtime: nodejs18.x
      MemorySize: 512
      Architectures:
      - x86_64
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - app.ts
  CreateWalletFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: wallet-gateway/  # Your code folder for create wallet
      Handler: app.createWallet  # Your handler function for create wallet
      Runtime: nodejs18.x
      MemorySize: 512
      Architectures:
      - x86_64
      Events:
        CreateWallet:
          Type: Api
          Properties:
            Path: /wallet
            Method: post
            RestApiId: !Ref MyAuthApi
    Metadata: 
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - app.ts
  GetWalletFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: wallet-gateway/  # Your code folder for create wallet
      Handler: app.getWallet  # Your handler function for create wallet
      Runtime: nodejs18.x
      MemorySize: 512
      Architectures:
      - x86_64
      Events:
        GetWallet:
          Type: Api
          Properties:
            Path: /wallet
            Method: get
            RestApiId: !Ref MyAuthApi
    Metadata: 
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - app.ts
  UpdateWalletFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: wallet-gateway/  # Your code folder for create wallet
      Handler: app.updateWallet  # Your handler function for create wallet
      Runtime: nodejs18.x
      MemorySize: 512
      Architectures:
      - x86_64
      Events:
        UpdateWallet:
          Type: Api
          Properties:
            Path: /wallet/update
            Method: post
            RestApiId: !Ref MyAuthApi
    Metadata: 
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - app.ts
  PostTransactionFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: wallet-gateway/  # Your code folder for create wallet
      Handler: app.postTransaction  # Your handler function for create wallet
      Runtime: nodejs18.x
      MemorySize: 512
      Architectures:
      - x86_64
      Events:
        PostTransaction:
          Type: Api
          Properties:
            Path: /transaction
            Method: post
            RestApiId: !Ref MyAuthApi
    Metadata: 
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - app.ts
  GetTransactionFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: wallet-gateway/  # Your code folder for create wallet
      Handler: app.getTransaction  # Your handler function for create wallet
      Runtime: nodejs18.x
      MemorySize: 512
      Architectures:
      - x86_64
      Events:
        GetTransaction:
          Type: Api
          Properties:
            Path: /transaction
            Method: get
            RestApiId: !Ref MyAuthApi
    Metadata: 
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - app.ts
  RecallTransactionFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: wallet-gateway/  # Your code folder for create wallet
      Handler: app.recallTransaction  # Your handler function for create wallet
      Runtime: nodejs18.x
      MemorySize: 512
      Architectures:
      - x86_64
      Events:
        RecallTransaction:
          Type: Api
          Properties:
            Path: /transaction/recall
            Method: post
            RestApiId: !Ref MyAuthApi
    Metadata: 
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - app.ts
  CashOutTransactionFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: wallet-gateway/  # Your code folder for create wallet
      Handler: app.cashOutTransaction  # Your handler function for create wallet
      Runtime: nodejs18.x
      MemorySize: 512
      Architectures:
      - x86_64
      Events:
        CashOutTransaction:
          Type: Api
          Properties:
            Path: /transaction/cashout
            Method: post
            RestApiId: !Ref MyAuthApi
    Metadata: 
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - app.ts

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'
